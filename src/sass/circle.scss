@use "sass:math";
@import "circle-param";

@mixin circle-wave($height, $percentage) {
    @if $percentage > 0 and $percentage < 100 {
        width: $height;
        $main-color: color-picker($percentage);
        $main-color-for-text: color-picker-for-text($percentage);

        $color-anim-name: quote(color-anim + $percentage);
        $border-anim-name: quote(border-anim + $percentage);
        $text-anim-name: quote(text-anim + $percentage);

        $anim-time: math.div($percentage, 8) + 10;

        @include keyframes($border-anim-name) {
            from {
                border: solid 2px $red;
                box-shadow: 0 0 5px $red;
            }
            to {
                border: solid 2px $main-color;
                box-shadow: 0 0 ($percentage / 30) + 5px $main-color;
            }
        }

        animation: unquote($border-anim-name) math.div($percentage, 40) * 1s ease-out forwards 1;

        border-radius: 50%;
        span {
            width: 100%;
            height: $height;

            border-radius: 50%;
            border: solid 3px var(--color-dark);

            position: relative;
            overflow: hidden;

            font-size: 1.8rem;
            z-index: 2;

            @include keyframes($text-anim-name) {
                from {
                    color: $red;
                    text-shadow: 0 0 3px $red;
                }
                to {
                    @if $percentage > 40 {
                        color: $main-color-for-text;
                        text-shadow: 0 0 3px $main-color-for-text;
                    } @else {
                        color: $main-color;
                        text-shadow: 0 0 3px $main-color;
                    }
                }
            }

            animation: unquote($text-anim-name) math.div($percentage, 40) * 1s ease-out forwards 1;

            display: flex;
            justify-content: center;
            align-items: center;

            &::after {
                content: "";
                height: 250%;
                width: 250%;
                position: absolute;
                z-index: -1;
                left: -75%;
                @include keyframes($color-anim-name) {
                    from {
                        background: $red;
                        top: 100%;
                        box-shadow: 0 0 20px $red;
                    }
                    to {
                        background: $main-color;
                        top: 100% - $percentage;
                        box-shadow: 0 0 20px $main-color;
                    }
                }
                border-radius: math.random(5) + 40 + 1%;
                animation: rotate360 $anim-time * 1s linear forwards infinite,
                    unquote($color-anim-name) math.div($percentage, 40) * 1s ease-out forwards 1;
            }
        }
    }
}

@mixin circle-progress($height, $percentage) {
    @if $percentage > 0 and $percentage < 100 {
        $main-color: color-picker($percentage);
        $main-color-for-text: color-picker-for-text($percentage);
        $color-dark: #1a1a1a;
        $animation-drip: 1.5s;
        $color-anim-name: quote(color-anim-prog + $percentage);
        $border-anim-name: quote(border-anim-prog + $percentage);
        $text-anim-name: quote(text-anim-prog + $percentage);
        $left-circle-anim-name: quote(left-circle-anim-prog + $percentage);
        $right-circle-anim-name: quote(right-circle-anim-prog + $percentage);
        $pie-anim-name: quote(pie-anim-name + $percentage);
        $color-big-anim-name: quote(color-big-anim-name + $percentage);

        $anim-time: math.div($percentage, 100) * $animation-drip;

        position: relative;
        @include keyframes($border-anim-name) {
            from {
                box-shadow: 0 0 5px $red;
                border: solid 1.5px $red;
            }
            to {
                box-shadow: 0 0 ($percentage / 30) + 5px $main-color;
                border: solid 1.5px $main-color;
            }
        }

        animation: unquote($border-anim-name) $anim-time linear forwards;

        span {
            @include keyframes($text-anim-name) {
                from {
                    text-shadow: 0 0 1px $red;
                    color: $red;
                }
                to {
                    text-shadow: 0 0 3px $main-color;
                    color: $main-color;
                }
            }

            animation: unquote($text-anim-name) $anim-time linear forwards;
        }

        .pie {
            .half-circle {
                height: 100%;
                width: 100%;
                border: math.div($li-height, 40) solid;
                clip: rect(0, $li-height / 2, $li-height, 0);
                border-radius: 50%;
                position: absolute;
                left: 0;
                top: 0;
            }
            @if $percentage <= 50 {
                clip: rect(0, $li-height, $li-height, $li-height / 2);
                .left-side {
                    @include keyframes($left-circle-anim-name) {
                        from {
                            transform: rotate(0);
                            border-color: $red;
                        }
                        to {
                            transform: rotate($percentage * 3.6deg);
                            border-color: $main-color;
                        }
                    }

                    animation: unquote($left-circle-anim-name) $anim-time linear forwards;
                }
                .right-side {
                    display: none;
                }
            } @else {
                @include keyframes($pie-anim-name) {
                    0% {
                        clip: rect(0, $li-height, $li-height, $li-height / 2);
                    }
                    99% {
                        clip: rect(0, $li-height, $li-height, $li-height / 2);
                    }
                    100% {
                        clip: rect(auto, auto, auto, auto);
                    }
                }

                animation: unquote($pie-anim-name) ($animation-drip / 2) linear forwards;
                .left-side {
                    @include keyframes($left-circle-anim-name) {
                        0% {
                            transform: rotate(0);
                            border-color: $red;
                        }
                        #{(5000 / $percentage) * 1%} {
                            transform: rotate(50 * 3.6deg);
                            border-color: color-picker(50);
                        }
                        100% {
                            transform: rotate(50 * 3.6deg);
                            border-color: $main-color;
                        }
                    }

                    animation: unquote($left-circle-anim-name) $anim-time linear forwards;
                }

                .right-side {
                    transform: rotate(-180deg);
                    visibility: hidden;
                    @include keyframes($right-circle-anim-name) {
                        from {
                            transform: rotate(-180deg);
                            visibility: visible;
                            border-color: color-picker(50);
                        }
                        to {
                            transform: rotate(-180deg + ($percentage - 50) * 3.6deg);
                            visibility: visible;
                            border-color: $main-color;
                        }
                    }

                    animation: unquote($right-circle-anim-name)
                        math.div($percentage - 50, 100) *
                        2s
                        linear
                        ($animation-drip / 2)
                        forwards;
                }
            }
        }
    }
}

@keyframes rotate360 {
    from {
        transform: rotate(0);
    }
    to {
        transform: rotate(360deg);
    }
}

@mixin keyframes($name) {
    @keyframes #{$name} {
        @content;
    }
}

@mixin animate($animation, $duration, $method, $delay, $times) {
    animation: $animation $duration $method $delay $times;
}

@function color-picker($percentage) {
    $red: 255;
    $green: 255;
    @if $percentage < 50 {
        $green: round(math.div(255 * $percentage, 100) * 2);
    } @else if $percentage > 50 {
        $red: round((255 - math.div(255 * $percentage, 100)) * 3);
    }
    @return darken($color: rgb($red, $green, 20), $amount: 5);
}

@function color-picker-for-text($percentage) {
    $red: 255;
    $green: 255;
    @if $percentage < 50 {
        $green: round(math.div(255 * $percentage, 100) * 2);
    } @else if $percentage > 50 {
        $red: round((255 - math.div(255 * $percentage, 100)) * 3);
    }
    @return rgb($red - 70, $green - 70, 0);
}
